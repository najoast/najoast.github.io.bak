<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-10-27T16:32:10+08:00</updated><id>/feed.xml</id><title type="html">周岩的 BLOG</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">使用 Git Hook 在提交代码前通过 luacheck 自动检查待提交代码</title><link href="/git/lua/luacheck/2019/10/23/git-pre-commit-luacheck.html" rel="alternate" type="text/html" title="使用 Git Hook 在提交代码前通过 luacheck 自动检查待提交代码" /><published>2019-10-23T19:56:25+08:00</published><updated>2019-10-23T19:56:25+08:00</updated><id>/git/lua/luacheck/2019/10/23/git-pre-commit-luacheck</id><content type="html" xml:base="/git/lua/luacheck/2019/10/23/git-pre-commit-luacheck.html">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;/h1&gt;
&lt;p&gt;由于脚本语言解释执行的特性，很多低级错误在运行到问题代码时才会报错，而不是像 C++ 这种静态语言那样在编译期就能由编译器检查出来，这就导致有很多本来在开发期就可以避免的问题，拖到线上才被发现。这里给出一个方案，可以在提交代码前，通过 Git 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;hook/pre-commit&lt;/code&gt; 机制，去做一些脚本代码的静态检查。&lt;/p&gt;

&lt;p&gt;我用 Lua 比较多，这里就以 Lua 为例来进行说明。Lua 的静态检查工具基本上只有一个 &lt;a href=&quot;https://github.com/mpeterv/luacheck&quot;&gt;luacheck&lt;/a&gt; 可用, 安装很简单，可以使用 &lt;a href=&quot;https://luarocks.org/&quot;&gt;luarocks&lt;/a&gt; 安装（类似 python 的 pip, 是一个 Lua 的包管理器）：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;luarocks install luacheck
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;安装好以后可以直接在终端使用:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;luacheck your_lua_file.lua
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;luacheck-的配置&quot;&gt;&lt;a href=&quot;https://luacheck.readthedocs.io/en/stable/config.html&quot;&gt;luacheck 的配置&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;默认的 luacheck 配置比较严格，会报很多警告，比如我们自定义的一些全局变量和函数，这当然是我们不希望看到的，既然要检查了，就要做到整个项目里所有文件都是 0 warnings / 0 errors。&lt;/p&gt;

&lt;p&gt;配置方法：
新建 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.luacheckrc&lt;/code&gt; 文件, 然后在里面加上下面的内容, 这里面是我们项目的一些符号，大家可以根据自己项目实际需求来添加或删除。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 这个文件是一个 Lua 文件

-- 每行最大长度，默认 120
max_line_length = 9999

-- 忽略的符号
ignore = {
    &quot;init&quot;,
    &quot;exit&quot;,
    &quot;accept&quot;,
    &quot;response&quot;,
    &quot;class&quot;,
}

-- 全局变量
globals = {
    &quot;Log&quot;,
    &quot;table.empty&quot;,
    &quot;table.size&quot;,
    &quot;table.merge&quot;,
    &quot;table.indexof&quot;,
    &quot;table.keys&quot;,
    &quot;table.values&quot;,
    &quot;table.valuestring&quot;,
    &quot;table.copy&quot;,
    &quot;table.deepcopy&quot;,
    &quot;table.first&quot;,
    &quot;table.deepmerge&quot;,
    &quot;table.walk&quot;,
    &quot;table.clear&quot;,
    &quot;string.split&quot;,
    &quot;string.ltrim&quot;,
    &quot;string.rtrim&quot;,
    &quot;string.trim&quot;,
    &quot;string.repeated&quot;,
    &quot;string.nocase&quot;,
    &quot;string.nocasefind&quot;,
    &quot;enum&quot;,
    &quot;ASSERT&quot;,
    &quot;ANSI_COLOR&quot;,
    &quot;const&quot;,
    &quot;math.round&quot;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完整的配置说明请查看：https://luacheck.readthedocs.io/en/stable/config.html&lt;/p&gt;

&lt;h1 id=&quot;git-pre-commit-配置&quot;&gt;Git pre-commit 配置&lt;/h1&gt;

&lt;p&gt;进入项目根目录下，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd .git/hooks&lt;/code&gt;, 进去后输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -ahl&lt;/code&gt; 会看到以下文件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-rwxr-xr-x   1 zy  staff   478B Jun 26  2018 applypatch-msg.sample
-rwxr-xr-x   1 zy  staff   896B Jun 26  2018 commit-msg.sample
-rwxr-xr-x   1 zy  staff   189B Jun 26  2018 post-update.sample
-rwxr-xr-x   1 zy  staff   424B Jun 26  2018 pre-applypatch.sample
-rwxr-xr-x   1 zy  staff   1.8K Oct 23 19:47 pre-commit.sample
-rwxr-xr-x   1 zy  staff   1.3K Jun 26  2018 pre-push.sample
-rwxr-xr-x   1 zy  staff   4.8K Jun 26  2018 pre-rebase.sample
-rwxr-xr-x   1 zy  staff   544B Jun 26  2018 pre-receive.sample
-rwxr-xr-x   1 zy  staff   1.5K Jun 26  2018 prepare-commit-msg.sample
-rwxr-xr-x   1 zy  staff   3.5K Jun 26  2018 update.sample
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们把 pre-commit.sample 文件的后缀名去掉 &lt;code class=&quot;highlighter-rouge&quot;&gt;mv pre-commit.sample pre-commit&lt;/code&gt;, 然后打开它，里面已经有一些内容了，我在这个基础上加上了 luacheck 的检查，可以直接用我提供的版本覆盖里面的内容：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# An example hook script to verify what is about to be committed.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Called by &quot;git commit&quot; with no arguments.  The hook should&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# exit with non-zero status after issuing an appropriate message if&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# it wants to stop the commit.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# To enable this hook, rename this file to &quot;pre-commit&quot;.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt; HEAD &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;against&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;HEAD
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# Initial commit: diff against an empty tree object&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;against&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4b825dc642cb6eb9a060e54bf8d69288fbee4904
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# If you want to allow non-ASCII filenames set this variable to true.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;allownonascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--bool&lt;/span&gt; hooks.allownonascii&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Redirect output to stderr.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;1&amp;gt;&amp;amp;2

&lt;span class=&quot;c&quot;&gt;# Cross platform projects tend to avoid non-ASCII filenames; prevent&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# them from being added to the repository. We exploit the fact that the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# printable range starts at the space character and ends with tilde.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$allownonascii&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# Note that the use of brackets around a tr range is ok here, (it's&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# even required, for portability to Solaris 10's /usr/bin/tr), since&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# the square bracket bytes happen to fall in the designated range.&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name-only&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--diff-filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;A &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$against&lt;/span&gt; |
	  &lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[ -~]\0'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; 0
&lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;	&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# If there are whitespace errors, print the offending file names and fail.&lt;/span&gt;
git diff-index &lt;span class=&quot;nt&quot;&gt;--check&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$against&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;file &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name-only&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$against&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#/usr/local/bin/luacheck -g -u -a --no-max-code-line-length --no-max-string-line-length --no-max-comment-line-length $file&lt;/span&gt;
    /usr/local/bin/luacheck &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里有几个点要解释下：&lt;/p&gt;
&lt;h3 id=&quot;1-exec-指令&quot;&gt;1. &lt;a href=&quot;https://askubuntu.com/questions/525767/what-does-an-exec-command-do&quot;&gt;exec&lt;/a&gt; 指令&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git diff-index --check --cached $against --
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这一行，原来前面有个 &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;, 这会导致执行到这一行后，bash 就会退出，导致后续的脚本得不到执行，所以要去掉。&lt;/p&gt;

&lt;h3 id=&quot;2-行尾空白符的检查&quot;&gt;2. 行尾空白符的检查&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git diff-index --check --cached $against --
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;还是这行，它的功能是检查行尾空白的，如果有行尾空白，或任何不必要的空白，就会报错，如果不喜欢可以把这行注释掉。&lt;/p&gt;

&lt;p&gt;我是开着的，因为这种空白是不必要的，也会导致 luacheck 警告。&lt;/p&gt;

&lt;h3 id=&quot;3-luacheck-的路径&quot;&gt;3. luacheck 的路径&lt;/h3&gt;
&lt;p&gt;在 for 循环里用到了 luacheck 的绝对路径&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/luacheck&lt;/code&gt;, 同学们在用的时候要看下是否自己的也在这里，如果不在，可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;which luacheck&lt;/code&gt; 来查看它的绝对路径，然后再改下脚本。&lt;/p&gt;

&lt;p&gt;这里必须要用绝对路径，哪怕在你终端里可以直接用 luacheck, 原因不是很清楚，不加就提示找不到，可能 git 用的 PATH 变量和终端的不一样。&lt;/p&gt;

&lt;h3 id=&quot;4-luacheck-的参数&quot;&gt;4. luacheck 的参数&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;-g, –no-global, 不警告全局变量&lt;/li&gt;
  &lt;li&gt;-u, –no-unused, 不警告未使用的变量&lt;/li&gt;
  &lt;li&gt;-a, –no-unused-args, 不警告未使用的参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三个可以加上，也可以不加，不加的话会更严格一点，可能会有一点不方便，我这里就不加了，我喜欢严格一点。&lt;/p&gt;

&lt;p&gt;其他的 –no-max 系列，我们在 .luacheckrc 里配完后已经没必要指定了。&lt;/p&gt;

&lt;h3 id=&quot;5-git-allownonascii-设置为-true&quot;&gt;5. Git allownonascii 设置为 true&lt;/h3&gt;
&lt;p&gt;在项目目录内执行以下指令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --bool hooks.allownonascii true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个一定要设置，否则项目中不能有中文文件名，如果没有中文名可以忽略这一步。&lt;/p&gt;

&lt;h1 id=&quot;postface&quot;&gt;Postface&lt;/h1&gt;

&lt;p&gt;Git 的 Hook 机制还是很好用的，其他语言也可以用这种方法做一些静态检查，用 Hook 也有其他一些东西可以玩的, 这里提出几个想法，抛砖引玉：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;提交后通过钉钉机器人通知到某个群里，让审代码的人可以及时收到通知去审代码。&lt;/li&gt;
  &lt;li&gt;提交后内网测试服自动同步最新代码，这样就不用 QA 每次都手动更新了。&lt;/li&gt;
  &lt;li&gt;如果是静态语言，比如 C++，提交后服务器上自动编译一下，看是否能编译通过，如果不通过直接钉钉机器人通知到开发群里。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这基本上是持续集成的领域了，还有很多可玩的，可以多想想，有什么好的想法也可以告诉我。&lt;/p&gt;</content><author><name></name></author><summary type="html">Preface 由于脚本语言解释执行的特性，很多低级错误在运行到问题代码时才会报错，而不是像 C++ 这种静态语言那样在编译期就能由编译器检查出来，这就导致有很多本来在开发期就可以避免的问题，拖到线上才被发现。这里给出一个方案，可以在提交代码前，通过 Git 的 hook/pre-commit 机制，去做一些脚本代码的静态检查。</summary></entry><entry><title type="html">VSCodeVim 最佳实践</title><link href="/vim/2019/09/20/vscode-vim-best-practices.html" rel="alternate" type="text/html" title="VSCodeVim 最佳实践" /><published>2019-09-20T10:36:25+08:00</published><updated>2019-09-20T10:36:25+08:00</updated><id>/vim/2019/09/20/vscode-vim-best-practices</id><content type="html" xml:base="/vim/2019/09/20/vscode-vim-best-practices.html">&lt;h1 id=&quot;1-preface&quot;&gt;1. Preface&lt;/h1&gt;
&lt;p&gt;初学者在学了一些 Vim 入门教程，掌握了一些基本操作后，往往不知道从何下手，日常工作中不太可能在终端下直接写代码，何况直接终端用 Vim 写代码，还需要大量插件的支持。&lt;/p&gt;

&lt;p&gt;其实我认识的很多 Vim 用户，现在已经不用原生 Vim 了，都是先选一个自己喜欢的编辑器/IDE, 再装 Vim 插件，基本上没有哪个现代编辑器/IDE没有 Vim 插件的了。&lt;/p&gt;

&lt;p&gt;我比较喜欢 VSCode，日常工作也是用 VSCode 写代码，所以今天就来介绍下 VSCode 里 Vim 插件的一些设置和应用技巧，至于是不是最佳实践不重要，起这样的标题完全是不知道用什么好，权当做一回标题党吧。&lt;/p&gt;

&lt;h1 id=&quot;2-编辑器选择&quot;&gt;2. 编辑器选择&lt;/h1&gt;
&lt;p&gt;在讲具体内容之前，先介绍几个编辑器的 Vim 插件现状, 顺便解释下我为什么要选 &lt;code class=&quot;highlighter-rouge&quot;&gt;VSCode&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sublime Text, 编辑器内建了对 Vim 的支持，所以不装插件只要改下配置就能用，但是功能比较原始，实在谈不上好用，只能说能用。也许有很多第三方插件提供了类似 easymotion 这样的功能吧，我没研究过，想用的可以看看有没有，如果有还是可以用的。&lt;/li&gt;
  &lt;li&gt;VisualStudio, 由于 VS 内建了海量的快捷键，且用熟了之后也很方便，所以对于 VS 资深用户，装个 Vim 插件反而不好用，这上面的 Vim 插件我也用过，体验非常糟糕，不推荐。&lt;/li&gt;
  &lt;li&gt;MacVim, 配合 &lt;a href=&quot;https://zhouyanlt.github.io/vim/2019/09/18/spf13-vim-frequently-used-hotkeys.html&quot;&gt;spf13-vim&lt;/a&gt; 还是可以用的，我个人在对 VSCode 审美疲劳时也会用一用，轻量、好看、好用。&lt;/li&gt;
  &lt;li&gt;IntelliJ IDEA, 这是个 IDE 了，非常重，但功能还是十分强大的，Vim 插件也基本够用，好像也是有 easymotion 的，基本上很完整，还有社区免费版可用，所以用的人非常多，但是我一开 CPU 就狂转，所以最终没用它。&lt;/li&gt;
  &lt;li&gt;VSCode, 目前我最喜欢的，Vim 插件支持非常成熟，其他编辑器的 Vim 插件一般只是提供了 Vim 的原生功能，而 VSCode 的 Vim 插件居然提供了很多原生 Vim 里的插件功能，也就是说，它是一个 Vim + Vim插件的插件集合体，功能非常强大，像是最常用的 easymotion 就提供了支持。原生 Vim 其实并不好用，想要高效还是要配合插件一起用，而 VSCode 的 Vim 插件做到了，我认为现在没有什么编辑器的 Vim 插件能够做到。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-vscode-vim-插件的安装&quot;&gt;3. VSCode Vim 插件的安装&lt;/h1&gt;
&lt;p&gt;上面说了那么多，对于初学者来说，建议直接用 VSCode 吧，不折腾。&lt;/p&gt;

&lt;p&gt;安装非常方便，打开插件界面，输入 Vim，第一个就是，点安装即可。&lt;/p&gt;

&lt;p&gt;800多万的安装量，感受下 Vim 用户的庞大，是不是感觉不用 Vim 和时代脱离了：）&lt;/p&gt;

&lt;h1 id=&quot;4-最佳实践&quot;&gt;4. 最佳实践&lt;/h1&gt;

&lt;h2 id=&quot;41-settingsjson-配置&quot;&gt;4.1 settings.json 配置&lt;/h2&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;vim.easymotion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;vim.leader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;vim.searchHighlightColor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#5f00af&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;vim.hlsearch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;vim.normalModeKeyBindingsNonRecursive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;before&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;H&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;T&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;before&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.lineNumbers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;relative&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;files.autoSave&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;onFocusChange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;workbench.editor.enablePreviewFromQuickOpen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.renderWhitespace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boundary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.detectIndentation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;showMusicMetrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;showGitMetrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;showWeeklyRanking&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.minimap.enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;git.autofetch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;首先把上面的配置放到自己的配置文件里，Mac 平台点左上角 Code-&amp;gt;Preferences-&amp;gt;Settings-&amp;gt; 在右边往下拉，找到 Edit in settings.json, 把上面内容放进去，大括号自己去掉。&lt;/p&gt;

&lt;p&gt;解释几个：&lt;/p&gt;
&lt;h3 id=&quot;vim-相关的&quot;&gt;Vim 相关的&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;“vim.easymotion”: true, 打开 easymotion, 这个是文件内快速跳转的插件(Jump everywhere)&lt;/li&gt;
  &lt;li&gt;“vim.leader”: “,”, 设置 leader 键为逗号，leader 键是 Vim 里某些指令的前置按键，默认是反斜线，比较难按。这个按键非常常用，必须改成逗号&lt;/li&gt;
  &lt;li&gt;“vim.searchHighlightColor”: “#5f00af”, 设置搜索高亮，不设的话没有高亮，很蠢&lt;/li&gt;
  &lt;li&gt;“vim.hlsearch”: true, 高亮显示最近的搜索结果，就是你按一下 *, 把结果都高亮出来，这个很重要&lt;/li&gt;
  &lt;li&gt;“vim.normalModeKeyBindingsNonRecursive”, 这个是改按键映射关系的，改完可以使用 H/L 切换标签&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vim-无关的&quot;&gt;Vim 无关的&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;“editor.lineNumbers”: “relative”, 设置相对行号，这个对于多行删除，多行注释非常重要，有了这个才算是可以用，否则自己数行数那基本上没法用&lt;/li&gt;
  &lt;li&gt;“files.autoSave”: “onFocusChange”, 设置文件自动保存，onFocusChange 指的是焦点离开后就保存，这个跟 Vim 无关，但非常好用，不用一直按 Cmd+s 了&lt;/li&gt;
  &lt;li&gt;“workbench.editor.enablePreviewFromQuickOpen”: false, 用 ctrl-p 打开的文件，默认是处理预览状态的，重新预览其他文件时就没了，要双击标签才会固定住，这个设置就是解决这个问题的，设置完后打开就是固定住的，读代码很方便&lt;/li&gt;
  &lt;li&gt;“editor.renderWhitespace”: “boundary”, 设置显示行首的空白字符（空格和制表符），这个也很不错，直观的看到自己输出的空白，有些开源项目要求必须全用空格。&lt;/li&gt;
  &lt;li&gt;“editor.minimap.enabled”: false, 关掉右边的小地图，就是宽宽的那个，这个看个人喜好了，我不太喜欢，开分栏时会减少显示面积&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;42-行级操作删除注释左移右移&quot;&gt;4.2 行级操作（删除、注释、左移右移）&lt;/h2&gt;
&lt;p&gt;上面设置了相对行号后，才能方便的做多行操作，在做具体操作前，先说单行操作分别是什么：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; 删除一行, &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt;, 两个 d 表示对一行操作，Vim 里的约定吧&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt; 注释一行, &lt;code class=&quot;highlighter-rouge&quot;&gt;gc&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;go comment&lt;/code&gt;, 两个 c 表示注释一行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; 左移一行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; 右移一行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面的操作，在 v 模式下，都可以生效，可以试一下按 &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift+v&lt;/code&gt; 选中一行，然后分别按 &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;gc&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;,  看看是不是删除、注释、左移、右移&lt;/p&gt;

&lt;p&gt;好了，有了上面的这些知识，我们可以开始多行操作了，具体操作方法如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;光标移到想要删除或注释的第一行&lt;/li&gt;
  &lt;li&gt;通过左边的相对行号，看一下想操作的最后一行的相对行号n&lt;/li&gt;
  &lt;li&gt;得出要操作的行数 m = n+1 (因为光标所在那行相当于第0行，所以要+1)&lt;/li&gt;
  &lt;li&gt;这时就可以用 Vim 的多行操作了，删除一行是 dd, 删除多行是 mdd; 注释一行是 gcc, 注释多行是 mgcc, 其他的类推&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;43-切换标签&quot;&gt;4.3 切换标签&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; 大写的 H 移动到左边那个标签&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; 大写的 L 移动到右边那个标签&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngt&lt;/code&gt; 移动到第 n 个标签（从左往右从1开始），当标签开的比较多时，由于标签上没显示数字，要自己数是第几个，所以基本上没法用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于标签开的比较多时怎么操作，我的习惯是这样的：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果标签离的近，就是 H/L 移动过去&lt;/li&gt;
  &lt;li&gt;如果离的不是特别远，按5下 H/L 还是可以接受的&lt;/li&gt;
  &lt;li&gt;如果特别远，对于要长时间写代码的几个标签，用鼠标把几个常用标签拖到一起；如果是一次性的，就用鼠标直接点了；也会用 ctrl-p 直接搜文件重新打开。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;44-调整光标所在行的位置vim基本功能&quot;&gt;4.4 调整光标所在行的位置(Vim基本功能)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zz&lt;/code&gt; 调整光标所在行到屏幕中间 (z 什么意思我也不知道，就硬记吧)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zt&lt;/code&gt; 调整光标所在行到屏幕最上方 (t == top)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zb&lt;/code&gt; 调整光标所在行到屏幕最下方 (b == bottom)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这三个用的非常多，尤其是 &lt;code class=&quot;highlighter-rouge&quot;&gt;zz&lt;/code&gt;, 一定要熟练使用&lt;/p&gt;

&lt;h2 id=&quot;45-文件内快速搜索某个函数变量vim基本功能&quot;&gt;4.5 文件内快速搜索某个函数、变量(Vim基本功能)&lt;/h2&gt;
&lt;p&gt;把光标移到想搜索的那个函数名或变量名上，按&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;就可以搜索了，按&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;下一个，按&lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;上一个。&lt;/p&gt;

&lt;p&gt;比如看到类里有个成员变量，想去回到它的定义处看有没有注释说它是干嘛的，一般定义的地方肯定是文件内第一次出现的地方，我们可以这么操作：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;先在这个变量上按下&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;锁定它&lt;/li&gt;
  &lt;li&gt;按 &lt;code class=&quot;highlighter-rouge&quot;&gt;gg&lt;/code&gt; 回到行首&lt;/li&gt;
  &lt;li&gt;按 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; 到下一个它出现的地方&lt;/li&gt;
  &lt;li&gt;按 &lt;code class=&quot;highlighter-rouge&quot;&gt;zz&lt;/code&gt; 调整到屏幕中间，方便阅读&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这4步熟悉后基本一气呵成&lt;/p&gt;

&lt;h2 id=&quot;46--对一个单词进行操作&quot;&gt;4.6  对一个单词进行操作&lt;/h2&gt;
&lt;p&gt;这里先说两个概念，操作符(operator)和动作命令(motion), 操作符就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;d(delete)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;c(change)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;y(yank)&lt;/code&gt; 等等，动作命令是&lt;code class=&quot;highlighter-rouge&quot;&gt;iw(in word)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;aw(a word)&lt;/code&gt;这些，可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;操作符 + 动作命令&lt;/code&gt;的方式，组合出千变万化的操作出来，帮助我们快速移动、修改等等。&lt;/p&gt;

&lt;p&gt;完整列表可以在 Vim 里输入 :h motion.txt 查看，这里只列出一些常用的。&lt;/p&gt;

&lt;h3 id=&quot;461-操作符operators&quot;&gt;4.6.1 操作符(Operators)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;操作符&lt;/th&gt;
      &lt;th&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;change (先删除再进入插入模式)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;delete&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;yank into register (does not change the text)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;~&lt;/td&gt;
      &lt;td&gt;swap case (转换大小写)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gu&lt;/td&gt;
      &lt;td&gt;make lowercase (转为小写)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gU&lt;/td&gt;
      &lt;td&gt;make uppercase (转为大写)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;shift right (右移)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;lt;&lt;/td&gt;
      &lt;td&gt;shift left (左移)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;462-动作命令motions&quot;&gt;4.6.2 动作命令(Motions)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;动作命令&lt;/th&gt;
      &lt;th&gt;功能&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;f{char}&lt;/td&gt;
      &lt;td&gt;find, 行内搜索一个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;t{char}&lt;/td&gt;
      &lt;td&gt;till, 功能类型 f{chat}, 但是是在这个搜索到的字符前停下，意思是到这个字符之前，很常用的motion&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gg&lt;/td&gt;
      &lt;td&gt;跳到行首&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;G&lt;/td&gt;
      &lt;td&gt;跳到行尾&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;w&lt;/td&gt;
      &lt;td&gt;移到下个单词的第一个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;移到上个单词的第一个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;移到单词最后一个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ge&lt;/td&gt;
      &lt;td&gt;上个单词的最后一个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;aw&lt;/td&gt;
      &lt;td&gt;“a word”, 选择一整个单词，包括它边上的空格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iw&lt;/td&gt;
      &lt;td&gt;in word, 选择一整个单词，不包括空格&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;463-举例&quot;&gt;4.6.3 举例：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diw&lt;/code&gt;, delete in word, 删除一个单词，只删除单词本身，不会旁边的空格&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;daw&lt;/code&gt;, delete a word, 删除一个单词，并删除旁边的一个空格（至于是左还是右边空格，Vim 会根据上下文自己判断，非常智能）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; 是删除， &lt;code class=&quot;highlighter-rouge&quot;&gt;diw&lt;/code&gt; 就是删除一个单词&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; 是进入 visual 模式的，如果用 &lt;code class=&quot;highlighter-rouge&quot;&gt;viw&lt;/code&gt;, 就表示选中一个单词&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; 是复制(yank), &lt;code class=&quot;highlighter-rouge&quot;&gt;yiw&lt;/code&gt; 表示复制一个单词&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gu&lt;/code&gt; 是变成小写，&lt;code class=&quot;highlighter-rouge&quot;&gt;guiw&lt;/code&gt; 就是让一个单词变成小写&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gU&lt;/code&gt; 是变成大写, &lt;code class=&quot;highlighter-rouge&quot;&gt;gUiw&lt;/code&gt; 就是让一个单词变成大写
*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有很多，这样只要记住一个，就可以举一反三，所以 Vim 是不需要死记硬背的，理解着记会更快。（当然不排除一些要死记硬背，但比较少）&lt;/p&gt;

&lt;h2 id=&quot;47-把一个单词改成另一个通过复制&quot;&gt;4.7 把一个单词改成另一个（通过复制）&lt;/h2&gt;
&lt;p&gt;比如有下面一段代码：&lt;/p&gt;
&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 用复制的方式把 _world 改成 _hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个问题看起来很简单，但实际上用起来后就会发现并不简单，我们用鼠标时的操作逻辑是下面这样的：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;双击 _hello，Ctrl+C 复制&lt;/li&gt;
  &lt;li&gt;双击 _world，Ctrl+V 粘贴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想象中的 Vim 操作逻辑是下面这样的：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;光标移到 &lt;code class=&quot;highlighter-rouge&quot;&gt;_hello&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;yiw&lt;/code&gt; 复制&lt;/li&gt;
  &lt;li&gt;光标移到 &lt;code class=&quot;highlighter-rouge&quot;&gt;_world&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;diw&lt;/code&gt; 删除，再 &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; 粘贴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这时你会发现，咦，贴出来的还是 &lt;code class=&quot;highlighter-rouge&quot;&gt;_world&lt;/code&gt;, 而不是期望中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;_hello&lt;/code&gt;, 这是因为 Vim 里的删除，实际上是剪切，会把删除的东西放到“剪切板”里，所以我们不能这样操作，而应像下面这样操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;光标移到 &lt;code class=&quot;highlighter-rouge&quot;&gt;_hello&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;yiw&lt;/code&gt; 复制&lt;/li&gt;
  &lt;li&gt;光标移到 &lt;code class=&quot;highlighter-rouge&quot;&gt;_world&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;viw&lt;/code&gt; 选中，再 &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; 粘贴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个操作是目前的最优解了，《Vim 实用技巧》这本书里给的也是这个方案（我是先自己发明这个方案才看的书：），这个方案虽然也很别扭，但是够用了，习惯了也不是不能接受。&lt;/p&gt;

&lt;h2 id=&quot;48-easymotion-文件内快速跳转&quot;&gt;4.8 EasyMotion 文件内快速跳转&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;,,j&lt;/code&gt; 按下后，会在每一行的行首高亮且有一个字母标在高亮处，这时输入指定字母就可以跳过去了，这个可以说是起飞的关键之一，必须要熟练掌握&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;,,k&lt;/code&gt; 上面是向下搜索，这个是向上，其他都一样&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;,,w&lt;/code&gt; 同&lt;code class=&quot;highlighter-rouge&quot;&gt;,,j&lt;/code&gt;，只不过是单词级的向后搜索&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;,,b&lt;/code&gt; 同&lt;code class=&quot;highlighter-rouge&quot;&gt;,,k&lt;/code&gt;, 只不过是单词级的向前搜索（&lt;code class=&quot;highlighter-rouge&quot;&gt;,,w&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;,,b&lt;/code&gt; 不如行级好用，因为太花了，我们可以用行级 Jump 到指定行，再用 f 过去，或者按几个 w 也可以，如果靠近行尾，可以先按$到行尾再按几个 b，方法很多。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;49-回到上一个编辑点&quot;&gt;4.9 回到上一个编辑点&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+o&lt;/code&gt;, 回到上一个编辑点&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+i&lt;/code&gt;, 前进到下一个编辑点，和上面的相反方向&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gi&lt;/code&gt;, 回到上一个进入插入模式的地方，并进入插入模式，这个在写代码时写到一半想看一下其他地方的代码，看完再按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;gi&lt;/code&gt; 回去，当然也可以 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+o&lt;/code&gt; 回去。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;410-代码的快速翻页&quot;&gt;4.10 代码的快速翻页&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+f&lt;/code&gt;, 下一页&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b&lt;/code&gt;, 上一页&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+d&lt;/code&gt;, 下半页&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+u&lt;/code&gt;, 上半页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这四个非常常用，尤其是读代码时，我们不可能按住 &lt;code class=&quot;highlighter-rouge&quot;&gt;j/k&lt;/code&gt; 不放去翻代码。&lt;/p&gt;

&lt;h2 id=&quot;411-分栏&quot;&gt;4.11 分栏&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:vs&lt;/code&gt;, 创建一个竖向分栏&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:sp&lt;/code&gt;, 创建一个横向分栏&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在创建多个分栏后，怎样在分栏之间移动？总不能用鼠标吧！当然不需要，下面就是移动分栏的方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;先按 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+w&lt;/code&gt; 再按 &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;, 移到左边一个分栏&lt;/li&gt;
  &lt;li&gt;先按 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+w&lt;/code&gt; 再按 &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;, 移到右边一个分栏&lt;/li&gt;
  &lt;li&gt;先按 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+w&lt;/code&gt; 再按 &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;, 移到下边一个分栏&lt;/li&gt;
  &lt;li&gt;先按 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+w&lt;/code&gt; 再按 &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;, 移到上边一个分栏&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+w&lt;/code&gt; 后，就进入“移动分栏待决模式”了，这时按 &lt;code class=&quot;highlighter-rouge&quot;&gt;hjkl&lt;/code&gt; 就可以移动了。&lt;/p&gt;

&lt;p&gt;分栏在屏幕比较大时还是很方便的，有时候写代码时，要看着另一块代码，也很方便。&lt;/p&gt;

&lt;h1 id=&quot;5-postface&quot;&gt;5. Postface&lt;/h1&gt;
&lt;p&gt;暂时就想到这些，还有很多比较常用的，想到了再补充。以上这些如果能掌握，基本上在 VSCode-Vim 环境下写代码足够了，等真正用进去了，才会发现有很多不会的或者不方便的点，这时要学会去 Google 或请教别人，只有这样才能不断强化，最终让 Vim 操作变成肌肉记忆。&lt;/p&gt;</content><author><name></name></author><summary type="html">1. Preface 初学者在学了一些 Vim 入门教程，掌握了一些基本操作后，往往不知道从何下手，日常工作中不太可能在终端下直接写代码，何况直接终端用 Vim 写代码，还需要大量插件的支持。</summary></entry><entry><title type="html">在线共同学习计划</title><link href="/education/2019/09/19/online-joint-learning-plan.html" rel="alternate" type="text/html" title="在线共同学习计划" /><published>2019-09-19T21:16:25+08:00</published><updated>2019-09-19T21:16:25+08:00</updated><id>/education/2019/09/19/online-joint-learning-plan</id><content type="html" xml:base="/education/2019/09/19/online-joint-learning-plan.html">&lt;p&gt;最近在公司内部发起了一个“训练营”的计划，规则如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;训练营是一期一期的，每期一个学习主题，短则一周，长则一月甚至更多，可以是一起看一本书，也可以是一系列的技术实操（比如实验楼），或者是一些算法题。&lt;/li&gt;
  &lt;li&gt;每期定好学习内容和计划后，会在公司内公布，同时会建一个学习用的群，愿意参加学习的可以申请加群，进群没有任何限制，只要愿意学习就行。&lt;/li&gt;
  &lt;li&gt;每天会规定学习进度，完成后需要拍照/截图晒出来，如果不达标就会被踢出群；训练营开始后不再接收新学员；学习结束后群解散。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个规则其实不是我原创的，而是根据网上一些培训机构学的，那是一些教绘画的机构，他们规则群里的人每天要把自己画的画晒出来，后面没完成会不会踢人，我就记不清了，反正当我想到想要发起这样一个计划时，上面的这套规则自然就出现在脑袋里了，也不知道怎么来的。&lt;/p&gt;

&lt;p&gt;至于为什么要发起这么个计划，是因为最近发现大部分身边的程序，能力不是在进步，而是在退步，究其原因，就跟大学生的英语水平一样，大一时是最强的，大四最弱。程序员也是这样，理论方面，刚毕业时比较强，后面参加工作后，就越来越差了，有些爱学习的程序自己如果有积累倒不会这样，但大部分平庸的程序员们，在公司只写上层逻辑，久而久之，就真的变成码农了，底层一概不知，理论水平也早丢到九霄云外去了。&lt;/p&gt;

&lt;p&gt;我发起这样一个计划，是希望带着大家一起学，建群拍照晒进度这些只不过是相互促进的一种手段，逼着去学习才是目的，大家一起学同一个东西，也比较有氛围。这应该会是一个比较好的促进大家进步的方案了。&lt;/p&gt;

&lt;p&gt;目前第一期正在进行中，主题是学习 Vim，课程是用的实验楼上的，效果我觉得还不错，大家学习的热情很高，第二期我准备开正则表达式，希望这能成为一个常备机制，不管我在不在都能一直进行下去。&lt;/p&gt;</content><author><name></name></author><summary type="html">最近在公司内部发起了一个“训练营”的计划，规则如下：</summary></entry><entry><title type="html">新学到的一些 Vim 知识点</title><link href="/vim/2019/09/19/vim-newly-learned-points.html" rel="alternate" type="text/html" title="新学到的一些 Vim 知识点" /><published>2019-09-19T05:00:25+08:00</published><updated>2019-09-19T05:00:25+08:00</updated><id>/vim/2019/09/19/vim-newly-learned-points</id><content type="html" xml:base="/vim/2019/09/19/vim-newly-learned-points.html">&lt;p&gt;最近发起了一个&lt;a href=&quot;https://zhouyanlt.github.io/education/2019/09/19/online-joint-learning-plan.html&quot;&gt;公司内部的学习班计划&lt;/a&gt;, 第一期的 Vim 入门，用的&lt;a href=&quot;https://www.shiyanlou.com/courses/2&quot;&gt;实验楼的课程&lt;/a&gt;，看完后还是有很多收获的，我记了下来，免得以后忘掉，大家也可以看看，有些非常有用，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;g*&lt;/code&gt;。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;15G&lt;/td&gt;
      &lt;td&gt;跳到15行，我之前都是 :15，感觉后面这个方便点，主要是习惯了吧&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ce&lt;/td&gt;
      &lt;td&gt;center, 使一行居中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:le&lt;/td&gt;
      &lt;td&gt;left, 左对齐&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:ri&lt;/td&gt;
      &lt;td&gt;right, 右对齐，这三个好像没什么用，文字编辑工作者用的，平时格式化代码用的比较多的还是 n« 或 n», 当然这个有时候可能会比较高效吧，记住也无妨&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;?&lt;/td&gt;
      &lt;td&gt;Like /, but ? is back search&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;#&lt;/td&gt;
      &lt;td&gt;同* , 只不过是反向搜索&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;g*&lt;/td&gt;
      &lt;td&gt;跟*一样是查找当前单词，但只要部分匹配，这个好用！！一直以为没这个功能&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;g#&lt;/td&gt;
      &lt;td&gt;同上，反向搜索&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:e#&lt;/td&gt;
      &lt;td&gt;回到前一个打开个文件，猜测#是个自动变量，保存上个文件的名字，e%是重新打开当前文件，因为%是记录当前文件名的自动变量, 通过 !echo $,# 我的猜测得到了证实&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:f&lt;/td&gt;
      &lt;td&gt;Show current editing file’s name&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:f newname&lt;/td&gt;
      &lt;td&gt;Change current file’s name to newname&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:n&lt;/td&gt;
      &lt;td&gt;Open the next file in the buffer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:N&lt;/td&gt;
      &lt;td&gt;Open the previous file in the buffer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vim -x fileName&lt;/td&gt;
      &lt;td&gt;创建加密文件，这个还挺有意思的，可以加密一些私密文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set&lt;/td&gt;
      &lt;td&gt;or :se, show all changed options&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set all&lt;/td&gt;
      &lt;td&gt;Show all options&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set option?&lt;/td&gt;
      &lt;td&gt;Show option’s value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set nooption&lt;/td&gt;
      &lt;td&gt;Cancel option’s value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set option=xxx&lt;/td&gt;
      &lt;td&gt;设置某个选项的值，不同选项的可选值需要查文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set autoindent(ai)&lt;/td&gt;
      &lt;td&gt;auto indent 自动缩进&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set autowrite(aw)&lt;/td&gt;
      &lt;td&gt;设置自动存档，默认未打开&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set backup(bk)&lt;/td&gt;
      &lt;td&gt;设置自动备份，默认未打开&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set cindent(cin)&lt;/td&gt;
      &lt;td&gt;设置 C 语言风格缩进，不知道干嘛的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:set shiftwidth=4&lt;/td&gt;
      &lt;td&gt;设置每次缩进时的空格数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最后吐槽下实验楼的这个课程，里面很多写错的，课程安排也不太好，很多没用的，这也就是给我这样的老手看还能吸收这么多有用知识，新人早劝退了。&lt;/p&gt;

&lt;p&gt;新人入门还是推荐 CoolShell 的文章：
&lt;a href=&quot;https://coolshell.cn/articles/5426.html&quot;&gt;简明 VIM 练级攻略&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">最近发起了一个公司内部的学习班计划, 第一期的 Vim 入门，用的实验楼的课程，看完后还是有很多收获的，我记了下来，免得以后忘掉，大家也可以看看，有些非常有用，比如 g*。</summary></entry><entry><title type="html">spf13-vim 介绍及常用快捷键</title><link href="/vim/2019/09/19/spf13-vim-frequently-used-hotkeys.html" rel="alternate" type="text/html" title="spf13-vim 介绍及常用快捷键" /><published>2019-09-19T05:00:25+08:00</published><updated>2019-09-19T05:00:25+08:00</updated><id>/vim/2019/09/19/spf13-vim-frequently-used-hotkeys</id><content type="html" xml:base="/vim/2019/09/19/spf13-vim-frequently-used-hotkeys.html">&lt;h1 id=&quot;一什么是-spf13-vim&quot;&gt;一、什么是 &lt;a href=&quot;https://github.com/spf13/spf13-vim&quot;&gt;spf13-vim&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;官方简介&quot;&gt;官方简介：&lt;/h2&gt;
&lt;p&gt;spf13-vim is a distribution of vim plugins and resources for Vim, Gvim and MacVim.&lt;br /&gt;
spf13-vim 是 Vim，Gvim 和 MacVim 的 vim 插件和资源的整合包。&lt;/p&gt;

&lt;p&gt;It is a good starting point for anyone intending to use VIM for development running equally well on Windows, Linux, *nix and Mac.&lt;br /&gt;
对于任何打算使用VIM进行开发的人来说，这是一个很好的起点，可以在Windows，Linux，*nix和Mac上同样运行。&lt;/p&gt;

&lt;h2 id=&quot;个人使用感受&quot;&gt;个人使用感受：&lt;/h2&gt;
&lt;p&gt;我觉得 spf13 算是整合的比较好的一个插件集了，有很多好用的插件，也有很多好用的快捷键，Vim 不是说装好插件就可以用的很舒服了，还要自定义很多快捷键，这些都是在 .vimrc 里配置的，想要用的舒服、顺手，这个配置要改很多，这是一个长期且艰辛的工作，而 spf13 都帮我们做好了，省了很多事。&lt;/p&gt;

&lt;p&gt;spf13-vim 是一个开箱即用的 vim 整合包，就像大脚/魔盒之于WOW，可以说有了 spf13, Vim 才成为一个强力的终端 IDE。&lt;/p&gt;

&lt;h2 id=&quot;关于-spf13-停止维护的问题&quot;&gt;关于 spf13 停止维护的问题：&lt;/h2&gt;
&lt;p&gt;spf13 的作者确实已经停止维护了， github 上最后一次提交是在2016年，但这不影响使用，它仍然是我用过最好用的 vim 整合包。&lt;/p&gt;

&lt;p&gt;后续我希望我有精力把它维护起来，大家有余力也可以做这件事。&lt;/p&gt;

&lt;h1 id=&quot;二安装&quot;&gt;二、安装&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://j.mp/spf13-vim3 -L &amp;gt; spf13-vim.sh &amp;amp;&amp;amp; sh spf13-vim.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;等待安装完成即可，中间会有几个插件需要输入 github 的帐号和密码的，这几个插件用不了，直接按回车跳过即可。&lt;/p&gt;

&lt;p&gt;装好后，不论是在终端下使用 Vim，还是 MacVim, 都已经有了 spf13 的环境。&lt;/p&gt;

&lt;h1 id=&quot;三常用快捷键&quot;&gt;三、常用快捷键&lt;/h1&gt;
&lt;h2 id=&quot;31-nerdtree-文件浏览器&quot;&gt;3.1 &lt;a href=&quot;http://github.com/scrooloose/nerdtree&quot;&gt;NERDTree&lt;/a&gt; 文件浏览器&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ctrl-e&amp;gt;&lt;/code&gt; 按一下打开文件浏览器，再按一下关闭&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;e&lt;/code&gt; 打开文件浏览器，并且文件定位到当前打开的文件上&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ctrl-e&amp;gt;&lt;/code&gt; 表示 Ctrl + e, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;e&lt;/code&gt; leader 是 Vim 中的一个概念，表示“前置按键”，有很多操作要先按下 leader 键再接一个按键，leader 可以在 vimrc 里配置，默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;，在 spf13 里是逗号(&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;打开文件浏览器后，可以使用 hjkl 上下移动，按回车就会打开当前光标所在的文件，按?可以打开帮助界面，里面有详细的按键介绍，有兴趣可以看看，常用的就是移动+回车。&lt;/p&gt;

&lt;p&gt;还有两个比较常用，按 s 在一个拆分窗口里打开文件，按 t 在新的 tab 页打开。&lt;/p&gt;

&lt;h2 id=&quot;32-ctrlp-全局文件搜索&quot;&gt;3.2 &lt;a href=&quot;http://kien.github.io/ctrlp.vim/&quot;&gt;ctrlp&lt;/a&gt; 全局文件搜索&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ctrl-p&amp;gt;&lt;/code&gt; 打开文件查找界面，这时可以输入文件名字，结果是秒出的，跟使用 vscode 和 sublime 一样，不一样的是不支持模糊查找，所以没 vscode/sublime 好用，但基本够用了，凑合用用吧。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;33-easymotion-任意位置跳转&quot;&gt;3.3 &lt;a href=&quot;https://github.com/Lokaltog/vim-easymotion&quot;&gt;EasyMotion&lt;/a&gt; 任意位置跳转&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;j&lt;/code&gt; 按下后，会在每一行的行首高亮且有一个字母标在高亮处，这时输入指定字母就可以跳过去了，这个可以说是起飞的关键之一，必须要熟练掌握&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;k&lt;/code&gt; 上面是向下搜索，这个是向上，其他都一样&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;w&lt;/code&gt; 同&lt;code class=&quot;highlighter-rouge&quot;&gt;,,j&lt;/code&gt;，只不过是单词级的向后搜索&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;b&lt;/code&gt; 同&lt;code class=&quot;highlighter-rouge&quot;&gt;,,k&lt;/code&gt;, 只不过是单词级的向前搜索（&lt;code class=&quot;highlighter-rouge&quot;&gt;,,w&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;,,b&lt;/code&gt; 不如行级好用，因为太花了，我们可以用行级 Jump 到指定行，再用 f 过去，或者按几个 w 也可以，如果靠近行尾，可以先按$到行尾再按几个 b，方法很多。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;34-多标签&quot;&gt;3.4 多标签&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;在用 ctrl-p 搜到一个文件后，可以再按 ctrl-t 在新标签里打开&lt;/li&gt;
  &lt;li&gt;在文件浏览器(NerdTree)里，定位到某个文件后，按 t 在新标签里打开&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:tabe 指定文件&lt;/code&gt; 这样也可以在新标签中打开一个文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:tabo&lt;/code&gt; 这样就可以关闭所有其他标签，只保留当前打开的，单词的意思应该是 tab close others&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; 打开下一个标签(默认按键是 &lt;code class=&quot;highlighter-rouge&quot;&gt;gt&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; 打开前一个标签(默认按键是 &lt;code class=&quot;highlighter-rouge&quot;&gt;gT&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngt&lt;/code&gt; n是一个数字，输入几就直接打开第几个标签，这个只在Vim 或 MacVim/GVim 下生效，VSCode 插件不生效，Sublime 插件估计也不行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我是用 VSCode 的，切标签一般我的习惯是，当打开的标签不多时，就多按几个 H/L，如果很多，就放弃移动了，直接 Ctrl-p 重新打开吧，这样还快点，当然偶尔也会用鼠标直接点，怎么方便怎么来。&lt;/p&gt;

&lt;h2 id=&quot;35-代码注释&quot;&gt;3.5 代码注释&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gc&lt;/code&gt; 选中若干行后, 输入&lt;code class=&quot;highlighter-rouge&quot;&gt;gc&lt;/code&gt;注释它们。(go comment)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt; 不需要选中，直接用，可以注释一行。Vim 里一般重复字符就是对一行进行操作，比如 dd 删除一行，这里 gcc 也是类似的逻辑&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngcc&lt;/code&gt; n 是数字，注释 n 行，这个非常好用，也是起飞的关键指令之一。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;36-surround-vim-action-增加&quot;&gt;3.6 &lt;a href=&quot;https://github.com/tpope/vim-surround&quot;&gt;Surround&lt;/a&gt; Vim Action 增加&lt;/h2&gt;
&lt;p&gt;这个并不常用，但是很好用，偶尔有奇效，可以选择性的掌握。&lt;/p&gt;

&lt;p&gt;具体用法我也不想写了，直接看作者写的英语吧。&lt;/p&gt;

&lt;p&gt;This plugin is a tool for dealing with pairs of “surroundings.” Examples of surroundings include parentheses, quotes, and HTML tags. They are closely related to what Vim refers to as text-objects. Provided are mappings to allow for removing, changing, and adding surroundings.&lt;/p&gt;

&lt;p&gt;Details follow on the exact semantics, but first, consider the following examples. An asterisk (*) is used to denote the cursor position.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Old text&lt;/th&gt;
      &lt;th&gt;Command&lt;/th&gt;
      &lt;th&gt;New text&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;“Hello *world!”&lt;/td&gt;
      &lt;td&gt;ds”&lt;/td&gt;
      &lt;td&gt;Hello world!&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[123+4*56]/2&lt;/td&gt;
      &lt;td&gt;cs])&lt;/td&gt;
      &lt;td&gt;(123+456)/2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“Look ma, I’m *HTML!”&lt;/td&gt;
      &lt;td&gt;cs”&amp;lt;q&amp;gt;&lt;/td&gt;
      &lt;td&gt;&amp;lt;q&amp;gt;Look ma, I’m HTML!&amp;lt;/q&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;if *x&amp;gt;3 {&lt;/td&gt;
      &lt;td&gt;ysW(&lt;/td&gt;
      &lt;td&gt;if ( x&amp;gt;3 ) {&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;my $str = *whee!;&lt;/td&gt;
      &lt;td&gt;vllllS’&lt;/td&gt;
      &lt;td&gt;my $str = ‘whee!’;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For instance, if the cursor was inside “foo bar”, you could type cs”’ to convert the text to ‘foo bar’.&lt;/p&gt;

&lt;p&gt;There’s a lot more, check it out at :help surround&lt;/p&gt;

&lt;h1 id=&quot;四一些自宝义设置&quot;&gt;四、一些自宝义设置&lt;/h1&gt;
&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;f5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:!&lt;/span&gt;ctags &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; nospell
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; relativenumber
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; nopaste

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:Tlist_Ctags_Cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/usr/local/Cellar/ctags/5.8_1/bin/ctags'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:ctrlp_cmd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'CtrlPMixed'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:syntastic_check_on_open&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:syntastic_lua_checkers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;luac&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;luacheck&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:syntastic_lua_luacheck_args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--no-unused-args&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot; To open each buffer in its own tabpage&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; au BufAdd,BufNewFile * nested tab sball&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; iskeyword&lt;span class=&quot;p&quot;&gt;-=.&lt;/span&gt;                    &quot; &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; an &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; of word designator
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; iskeyword&lt;span class=&quot;p&quot;&gt;-=-&lt;/span&gt;                    &quot; &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; an &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; of word designator

&lt;span class=&quot;c&quot;&gt;&quot; path指定查找的路径，详情help path&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; includeexpr是尝试替换路径名中的.为/，详情help includeexpr&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot; suffixesadd为尝试路径后缀，详情help suffixesadd&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; includeexpr&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;substitute&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;fname&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'\\.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'g'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; suffixesadd&lt;span class=&quot;p&quot;&gt;=.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lua&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把上面这些内容放到 ~/.vimrc.local 文件内，里面比较重要的是&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;set nospell 禁用拼写检查，不禁用会有很多红色波浪线，神烦&lt;/li&gt;
  &lt;li&gt;set relativenumber 设置相对行号，这个极其重要，起飞的关键&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他设置看不懂没关系，先放进去再说，以后再慢慢研究&lt;/p&gt;

&lt;h1 id=&quot;五后续学习&quot;&gt;五、后续学习&lt;/h1&gt;
&lt;p&gt;http://vim.spf13.com/&lt;/p&gt;

&lt;p&gt;这是 spf13-vim 的官方网站，里面有很多插件介绍和快捷键，有兴趣可以看看，收集插件也是乐趣之一，用的久了自然就会越来越熟悉，这里只是抛砖引玉，希望大家后续发起更多有趣、好用的插件。&lt;/p&gt;</content><author><name></name></author><summary type="html">一、什么是 spf13-vim 官方简介： spf13-vim is a distribution of vim plugins and resources for Vim, Gvim and MacVim. spf13-vim 是 Vim，Gvim 和 MacVim 的 vim 插件和资源的整合包。</summary></entry><entry><title type="html">MMORPG 好玩的原因</title><link href="/gamedev/2019/09/05/mmorpg-fun-reason.html" rel="alternate" type="text/html" title="MMORPG 好玩的原因" /><published>2019-09-05T17:59:25+08:00</published><updated>2019-09-05T17:59:25+08:00</updated><id>/gamedev/2019/09/05/mmorpg-fun-reason</id><content type="html" xml:base="/gamedev/2019/09/05/mmorpg-fun-reason.html">&lt;p&gt;这篇文章只是根据我浅显的理解来谈一谈，不一定对，大家随便看看就好。&lt;/p&gt;

&lt;p&gt;MMORPG 之所以好玩，我认为是由于其社交属性决定的，游戏里营造了一个虚拟世界，这个世界里有尔虞我诈，也有爱恨情仇，参与游戏的也都是一个个鲜活的个体，跟现实世界其实没什么两样。明白了这一点，想做好一个 MMORPG 看起来就没那么难了，游戏设计者只要专注于营造出一个合理的，公平公正的虚拟世界，让大家基于这个世界能产生出社交互动，那么这个游戏就是个好游戏。&lt;/p&gt;

&lt;p&gt;这些感悟是最近沉迷 WOW Classic 得出的，我以前觉得我不会再像年轻时那样痴迷 MMO 了，但最近的痴迷跟年轻时没有任何两样，这就让我反思了下为什么会这样，怀旧服固然本身品质过硬，但如果是我一个人玩不可能玩的下去。我这次是和朋友、同学、同事一起玩的，加起来大概有10几个人，正是由于这10几个人的存在，让我在虚拟世界里有了社交，有了互帮互助，所以才觉得好玩、想玩，如果没有他们，我可能根本就不会玩。&lt;/p&gt;

&lt;p&gt;就算魔兽世界做为一个优秀的 MMORPG，也没人愿意开个私服玩单机版，其他游戏也都是类似的，因为玩的就是社交，没有了这一点，游戏内的等级、经验、装备，都变成了一 堆无意义的数字。&lt;/p&gt;

&lt;p&gt;早期魔兽的策划们看似深刻理解了这一点，很多设计都是围绕社交展开，比如怪物强度很高，不得不组队打怪；不能飞行，大家只能在地上走来走去，这样更容易遇到人；副本必须跑到副本门口，不能在主城随机排等等等等。&lt;/p&gt;

&lt;p&gt;还有沉浸感也很重要，这让人感觉这个虚拟世界更真实，比如在旅店下线；没有传送石，只有有限有飞行点，必须在地图上到处跑，这都给这个世界增加了沉浸感。&lt;/p&gt;

&lt;p&gt;国内的 MMORPG 也有些做的好的，但大多不太行，因为他们营造出来的世界太不公平，让人没办法生存下去，谈何爱恨情仇？&lt;/p&gt;

&lt;p&gt;综上，想做一个好的 MMORPG，关键在于营造一个真实、公平公正的虚拟世界，把里面的玩家当成一个个活着的人，而不是那一堆冷冰冰的数字（次留、ARPU等），为他们设计出各种促进社交的玩法，其他的，就交给他们吧，有人的地方就有江湖。&lt;/p&gt;</content><author><name></name></author><summary type="html">这篇文章只是根据我浅显的理解来谈一谈，不一定对，大家随便看看就好。</summary></entry><entry><title type="html">从程序角度谈谈游戏策划的重要性</title><link href="/gamedev/2019/09/05/the-importance-of-game-designer.html" rel="alternate" type="text/html" title="从程序角度谈谈游戏策划的重要性" /><published>2019-09-05T09:59:25+08:00</published><updated>2019-09-05T09:59:25+08:00</updated><id>/gamedev/2019/09/05/the-importance-of-game-designer</id><content type="html" xml:base="/gamedev/2019/09/05/the-importance-of-game-designer.html">&lt;h1 id=&quot;程序员对策划的普遍看法&quot;&gt;程序员对策划的普遍看法&lt;/h1&gt;
&lt;p&gt;其他工种对游戏策划的重要性是怎么看待的我不太清楚，但是程序员群体对于策划的看法大多是不够尊重的，这跟策划的水平和出身有很大关系，国内的策划大部分都是野路子出身，真正经过正规训练的不多，像程序员和美术都是经过长期而严格的训练的，弱一些的也要去上个培训班培训半年到一年，但这种情况在策划身上不存在，国内好像没有什么专门的培训游戏策划的学校，大学里也没有这方面的专业（据说有个学校开了，但开的课一言难尽）。这就导致了策划这样一个重要的岗位，在中国确是一个非常尴尬的存在，招应届生时，往往只要看是不是喜欢这行，是不是聪明，是不是对游戏设计有一些理解，就差不多可以招进来了，而一旦招进来就算是入行了，以后再换工作时，凭借着工作经验可以顺利的继续做下去。有些公司更是把游戏测试和策划挂钩，做为测试的上升通道，不可否认这里面也有历害的人，但大部分更为不堪。&lt;/p&gt;

&lt;p&gt;因为他们没有专业训练，所以自视甚高的程序员当然是极度鄙视策划的（当然各工种互相鄙视是常态），而国内大部分策划也是不争气，自身水准非常低，又在这个位置上对其他经过专业训练的工种指手划脚，结果可想而知。&lt;/p&gt;

&lt;p&gt;我不想继续挑起这些争端了，因为我见过优秀的策划，知道这是一门高深的学问，程序员们不应该对这个行业报有偏见，某些策划的低水平不代表这个行业就没有高水准的人存在。&lt;/p&gt;

&lt;h1 id=&quot;策划的重要性&quot;&gt;策划的重要性&lt;/h1&gt;
&lt;p&gt;一个游戏项目分两个阶段：研发阶段和发行阶段，发行不在我们讨论之列，只讲研发。&lt;/p&gt;

&lt;p&gt;各个工种对研发成败占比，我个人觉得差不多是这样的：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;策划 50%&lt;/li&gt;
  &lt;li&gt;美术 30%&lt;/li&gt;
  &lt;li&gt;程序 20%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个占比是现在(2019年)的，以后随着技术的进步，占比一定还会再变。&lt;/p&gt;

&lt;p&gt;看到这些数字，美术和程序可能不服了，但仔细想一想，大家其实心知肚明，不服气也不行，“高贵”的程序和美术，对游戏成败的影响就是这么小。程序方面，任你代码写的再漂亮，再健壮，再灵活，顶天了是不拉项目后腿。说白了，策划是灵魂，美术是肉体，程序是工人，负责把灵魂和肉体一点一点的堆砌出来。&lt;/p&gt;

&lt;p&gt;美术做为肉体，也是很重要的，人都喜欢美的东西，画的好第一印象好，大家才愿意去玩，才给你一个了解你美丽灵魂的机会，否则根本不会看你一眼。至于程序，只有在出 Bug 时才会被人想起，哦原来还有程序这回事，这什么垃圾程序啊，这么多 bug。&lt;/p&gt;

&lt;h1 id=&quot;游戏程序就业建议&quot;&gt;游戏程序就业建议&lt;/h1&gt;
&lt;p&gt;明白了策划的重要性，大家以后在做项目时，可以先看下这个项目的主策划是怎么样的，如果主策划不行，那我建议不要继续在这个项目里待下去，因为没有任何成功的可能，策划不行任你美术美如画，代码跑上天，也是死路一条。一将无能累死三军，做的过程也会特别累，最后还注定要死，那为什么还要在这种项目里浪费生命呢？要知道大家虽然在哪工作都是拿一样的工资，但有一个靠谱的主策划，项目有成功的可能，大家是会有丰厚的额外收益的，所以没必要跟着垃圾策划浪费生命。&lt;/p&gt;

&lt;p&gt;最后，如果大家足够幸运，遇到了一个专业的主策划，那希望程序员们能给这个人足够的尊重，不要是一种敌视的态度，而是一个配合的态度，好的策划成功了50%，剩下的就是按部就班把代码写好，项目就有成功的可能，何乐而不为？&lt;/p&gt;</content><author><name></name></author><summary type="html">程序员对策划的普遍看法 其他工种对游戏策划的重要性是怎么看待的我不太清楚，但是程序员群体对于策划的看法大多是不够尊重的，这跟策划的水平和出身有很大关系，国内的策划大部分都是野路子出身，真正经过正规训练的不多，像程序员和美术都是经过长期而严格的训练的，弱一些的也要去上个培训班培训半年到一年，但这种情况在策划身上不存在，国内好像没有什么专门的培训游戏策划的学校，大学里也没有这方面的专业（据说有个学校开了，但开的课一言难尽）。这就导致了策划这样一个重要的岗位，在中国确是一个非常尴尬的存在，招应届生时，往往只要看是不是喜欢这行，是不是聪明，是不是对游戏设计有一些理解，就差不多可以招进来了，而一旦招进来就算是入行了，以后再换工作时，凭借着工作经验可以顺利的继续做下去。有些公司更是把游戏测试和策划挂钩，做为测试的上升通道，不可否认这里面也有历害的人，但大部分更为不堪。</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2019/08/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-08-23T17:59:25+08:00</published><updated>2019-08-23T17:59:25+08:00</updated><id>/jekyll/update/2019/08/23/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2019/08/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>